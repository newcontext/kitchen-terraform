---
title: Using the Terraform Docker Provider
---

<div class="container" style="padding-top: 0px;">
  <div class="row">
    <div class="col-12">
      <div class="jumbotron">
        <h1 class="display-3">
          Terraform Docker Provider
        </h1>
        <p class="lead">
          This is an example of how to utilize Kitchen-Terraform to test a Docker container running on localhost configured with the <a href="https://www.terraform.io/docs/providers/docker/index.html" style="color: #32c850;">Terraform Docker Provider</a>.
        </p>
        <div class="float-right">Author: Erik R. Rygg</div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-4">
      <div class="list-group" id="list-tab" role="tablist">
        <a class="list-group-item list-group-item-action active" id="list-one-list" data-toggle="list" href="#list-one" role="tab" aria-controls="one">
          1. Requirements & Setup
        </a>
        <a class="list-group-item list-group-item-action" id="list-two-list" data-toggle="list" href="#list-two" role="tab" aria-controls="two">
          2. Create Terraform code
        </a>
        <a class="list-group-item list-group-item-action" id="list-three-list" data-toggle="list" href="#list-three" role="tab" aria-controls="three">
          3. Create Terraform outputs
        </a>
        <a class="list-group-item list-group-item-action" id="list-four-list" data-toggle="list" href="#list-four" role="tab" aria-controls="four">
          4. Create tests
        </a>
        <a class="list-group-item list-group-item-action" id="list-five-list" data-toggle="list" href="#list-five" role="tab" aria-controls="five">
          5. Run tests
        </a>
      </div>
    </div>
    <div class="col-8">
      <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="list-one" role="tabpanel" aria-labelledby="list-one-list">
          Requirements are a Docker host listening on the Unix socket located at: unix://localhost/var/run/docker.sock.
          <br><br>
          The Docker container to be tested must be running an SSH daemon in the foreground to enable the Kitchen-Terraform verifier to remotely execute tests.
          <br><hr>
          To setup the repository, run these commands:
          <br><br>
          <% code("bash") do %>
mkdir -p docker_provider_example/test/integration/example/controls
cd docker_provider_example
          <% end %>
          Create the <p class="font-weight-bold" style="color: #32c850; display: inline;">Gemfile</p> to install our dependencies.
          <br><br>
          <% code("ruby") do %>
source "https://rubygems.org/" do
  gem "kitchen-terraform"
end
          <% end %>
          Install Kitchen-Terraform and other rubygems, install bundler if not installed yet.
          <br><br>
          <% code("bash") do %>
gem install bundler
bundle install
          <% end %>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">kitchen.yml</p> which brings together the Terraform module code and Inspec controls.
          <br><br>
          <div class="row">
            <div class="col">
              <% code("yml") do %>
---
driver:
  name: terraform

provisioner:
  name: terraform

transport:
  name: ssh
  password: root

verifier:
  name: terraform
  systems:
    - name: container
      backend: ssh
      hosts_output: container_host
      controls:
        - operating_system
      port: 2222
    - name: terraform_state
      backend: local
      controls:
        - state_files

platforms:
  - name: ubuntu

suites:
  - name: example


              <% end %>
            </div>
            <div class="col">
              <br><br>
              The Kitchen-Terraform driver is enabled.
              <br><br><br>
              The Kitchen-Terraform provisioner is enabled.
              <br><br><br>
              The Test Kitchen SSH transport is configured to use password authentication.
              <br><br><br>
              The Kitchen-Terraform verifier is configured with two groups.
              <br><br>
              The container group includes a control for the operating system of the Docker container.
              <br><br>
              For each Docker host (see creating outputs step), the verifier will run the control over SSH on port 2222.
              <br><br><br>
              The platforms provide arbitrary grouping for the test suite matrix.
              <br><br>
              The suite name corresponds to the directory containing the Inspec profile: <% code("bash") do %>test/integration/example/<% end %>
            </div>
          </div>
        </div>
        <div class="tab-pane fade" id="list-two" role="tabpanel" aria-labelledby="list-two-list">
          Example Terraform code using the Docker provider is below. The resources created by this code is what we'll be testing later on.
          <br><br>
          Create the file <p class="font-weight-bold" style="color: #32c850; display: inline;">main.tf</p> and add each block of code into it.
          <br><br>
          The Docker provider is configured to communicate with a Docker host listening on a Unix socket on localhost.
          <br><br>
          <% code("ruby") do %>
provider "docker" {
  host = "unix://localhost/var/run/docker.sock"
}
          <% end %>
          A SSH daemon Docker image from the public registry is configured as a data source.
          <br><br>
          <% code("ruby") do %>
data "docker_registry_image" "ubuntu" {
  name = "rastasheep/ubuntu-sshd:latest"
}
          <% end %>
          A Docker image is configured on the Docker host using the data source.
          <br><br>
          <% code("ruby") do %>
resource "docker_image" "ubuntu" {
  keep_locally  = true
  name          = data.docker_registry_image.ubuntu.name
  pull_triggers = [ data.docker_registry_image.ubuntu.sha256_digest ]
}
          <% end %>
          A Docker container based on the Docker image is configured to be running on the Docker host. The container forwards localhost:2222 to its internal SSH daemon.
          <br><br>
          <% code("ruby") do %>
resource "docker_container" "ubuntu" {
  image    = docker_image.ubuntu.name
  must_run = true
  name     = "ubuntu_container"

  ports {
    external = 2222
    internal = 22
  }
}
          <% end %>
          <br><br>
          Now create the <p class="font-weight-bold" style="color: #32c850; display: inline;">versions.tf</p> file.
          <br><br>
          The configuration show below restricts Terraform to versions equal to or greater than 0.13.0 and less than 0.14.0, and ensures the use of a docker provider new enough to work with 0.13
          <br><br>
          <% code("ruby") do %>
terraform {
  required_providers {
    docker = {
      source = "terraform-providers/docker"
      version = "~> 2.7"
    }
  }
  required_version = "~> 0.13.0"
}
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-three" role="tabpanel" aria-labelledby="list-three-list">
          To assist in testing, Terraform outputs will provide the path of the backend state file and the container host name. The Kitchen-Terraform verifier uses these artifacts to validate the Terraform code operated successfully.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">output.tf</p> and add each block of code into it.
          <br><br>
          <% code("ruby") do %>
output "terraform_state" {
  description = "The path to the backend state file"
  value       = "${path.module}/terraform.tfstate.d/${terraform.workspace}/terraform.tfstate"
}

output "container_host" {
  description = "Host where the container is running"
  value       = "localhost"
}
          <% end %>
          Refer back to the <p class="font-weight-bold" style="color: #32c850; display: inline;">kitchen.yml</p> and in the verifier section you will see a reference to the container host output.
        </div>
        <div class="tab-pane fade" id="list-four" role="tabpanel" aria-labelledby="list-four-list">
          We've created the Terraform code, now it's time to create the Inspec control tests. Please see the <a href="https://www.inspec.io/docs/reference/profiles/" style="color: #32c850;">Inspec documentation</a> to learn more about profiles and controls.
          <br><br>
          Create a default profile file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/inspec.yml</p>
          <br><br>
          <% code("yml") do %>
---
name: default
          <% end %>
          Referring back to the <p class="font-weight-bold" style="color: #32c850; display: inline;">kitchen.yml</p> and inside the verifier section there is an operating_system control which we need to create.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/operating_system.rb</p>
          <% code("ruby") do %>
# frozen_string_literal: true

control "operating_system" do
  describe "the operating system" do
    subject do command("lsb_release -a").stdout end

    it "is Ubuntu" do is_expected.to match /.*Ubuntu.*/ end
  end
end
          <% end %>
          Let's create the state_files control, which will validate the Terraform state file is created and has the proper content.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/state_file.rb</p>
          <% code("ruby") do %>
# frozen_string_literal: true

terraform_state = input("terraform_state", {})

control "state_files" do
  describe "the terraform state file" do
    subject do
      file terraform_state
    end

    it do
      is_expected.to exist
    end
  end
end
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-five" role="tabpanel" aria-labelledby="list-five-list">
          Create resources from the Terraform code in <p class="font-weight-bold" style="color: #32c850; display: inline;">main.tf</p>
          <br><br>
          <% code("bash") do %>
bundle exec kitchen converge
          <% end %>
          Below is example output of Kitchen-Terraform convergence.
          <br><br>
          <% code("ruby") do %>
-----> Starting Test Kitchen (v2.6.0)
$$$$$$ Reading the Terraform client version...
       Terraform v0.13.0
       + provider registry.terraform.io/terraform-providers/docker v2.7.2
-----> Creating <example-ubuntu>...
$$$$$$ Verifying the Terraform client version is in the supported interval of >= 0.11.4, < 0.14.0...
$$$$$$ Reading the Terraform client version...
       Terraform v0.13.0
       + provider registry.terraform.io/terraform-providers/docker v2.7.2
$$$$$$ Finished reading the Terraform client version.
$$$$$$ Finished verifying the Terraform client version.
$$$$$$ Initializing the Terraform working directory...

       Initializing the backend...

       Initializing provider plugins...
       - Finding terraform-providers/docker versions matching "~> 2.7"...
       - Installing terraform-providers/docker v2.7.2...
       - Installed terraform-providers/docker v2.7.2 (signed by HashiCorp)

       Terraform has been successfully initialized!
$$$$$$ Finished initializing the Terraform working directory.
$$$$$$ Creating the kitchen-terraform-example-ubuntu Terraform workspace...
       Created and switched to workspace "kitchen-terraform-example-ubuntu "!

$$$$$$ Finished creating the kitchen-terraform-example-ubuntu Terraform workspace.
       Finished creating <example-ubuntu > (0m5.73s).
-----> Converging <example-ubuntu>...
$$$$$$ Verifying the Terraform client version is in the supported interval of >= 0.11.4, < 0.14.0...
$$$$$$ Reading the Terraform client version...
       Terraform v0.13.0
       + provider registry.terraform.io/terraform-providers/docker v2.7.2
$$$$$$ Finished reading the Terraform client version.
$$$$$$ Finished verifying the Terraform client version.
$$$$$$ Selecting the kitchen-terraform-example-ubuntu Terraform workspace...
$$$$$$ Finished selecting the kitchen-terraform-example-ubuntu Terraform workspace.
$$$$$$ Downloading the modules needed for the Terraform configuration...
$$$$$$ Finished downloading the modules needed for the Terraform configuration.
$$$$$$ Validating the Terraform configuration files...
       Success! The configuration is valid.

$$$$$$ Finished validating the Terraform configuration files.
$$$$$$ Building the infrastructure based on the Terraform configuration...
       data.docker_registry_image.ubuntu: Refreshing state...
       docker_image.ubuntu: Creating...
       docker_image.ubuntu: Creation complete after 2s [id=sha256:ae51c8f5e14e6fc277fa6fce44bf7178...3a13eb5b4rastasheep/ubuntu-sshd:latest]
       docker_container.ubuntu: Creating...
       docker_container.ubuntu: Creation complete after 1s [id=0801b683b3f63cc1acc895ac900071448c1efb9e0bc4b160564d00c761ba56e9]

       Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

       Outputs:

       backend_state = ./terraform.tfstate.d/kitchen-terraform-example-ubuntu/terraform.tfstate
       container_host = "localhost"
$$$$$$ Finished building the infrastructure based on the Terraform configuration.
$$$$$$ Reading the output variables from the Terraform state...
$$$$$$ Finished reading the output variables from the Terraform state.
$$$$$$ Parsing the Terraform output variables as JSON...
$$$$$$ Finished parsing the Terraform output variables as JSON.
$$$$$$ Writing the output variables to the Kitchen instance state...
$$$$$$ Finished writing the output varibales to the Kitchen instance state.
$$$$$$ Writing the input variables to the Kitchen instance state...
$$$$$$ Finished writing the input variables to the Kitchen instance state.
       Finished converging <example-ubuntu> (0m43.18s).
-----> Test Kitchen is finished. (0m49.75s)
          <% end %>

          Run the Inspec controls from the <p class="font-weight-bold" style="color: #32c850; display: inline;">kitchen.yml</p> verifier section by running this command
          <br><br>
          <% code("bash") do %>
bundle exec kitchen verify
          <% end %>
          Below is example output from Kitchen-Terraform verify.
          <br><br>
          <% code("ruby") do %>
-----> Starting Test Kitchen (v2.6.0)
-----> Setting up <example-ubuntu>...
       Finished setting up <example-ubuntu> (0m0.00s).
-----> Verifying <example-ubuntu>...
$$$$$$ Reading the Terraform input variables from the Kitchen instance state...
$$$$$$ Finished reading the Terraform input variables from the Kitchen instance state.
$$$$$$ Reading the Terraform output variables from the Kitchen instance state...
$$$$$$ Finished reading the Terraform output varibales from the Kitchen instance state.
$$$$$$ Verifying the systems...
$$$$$$ Verifying the 'container' system...

Profile: default
Version: (not specified)
Target:  local://
Target:  ssh://root@localhost:2222

  ✔  operating_system: the operating system is Ubuntu
     ✔  the operating system is Ubuntu


Profile Summary: 1 successful control, 0 control failures, 0 controls skipped
Test Summary: 1 successful, 0 failures, 0 skipped
$$$$$$ Finished verifying the 'container' system.
$$$$$$ Verifying the 'terraform_state' system...

Profile: default
Version: (not specified)
Target:  local://

  ✔  state: Confirm the container state
     ✔  the backend state file is expected to exist


Profile Summary: 1 successful control, 0 control failures, 0 controls skipped
Test Summary: 1 successful, 0 failures, 0 skipped
$$$$$$ Finished verifying the 'terraform_state' system.
$$$$$$ Finished verifying the systems.
       Finished verifying <example-ubuntu> (0m0.17s).
-----> Test Kitchen is finished. (0m1.06s)
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
